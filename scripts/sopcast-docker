#!/usr/bin/env bash

usage() {
    cat <<EOM
Usage:
$(basename "$0") <sopcast-url>
EOM
}

find_empty_port() {
  local find_empty_port="
import socket
s=socket.socket()
s.bind(('', 0))
print(s.getsockname()[1])
s.close()
"
  local empty_port=$(python -c "$find_empty_port")
  echo "$empty_port"
}

is_container_running() {
  local container_id=$1
  docker inspect -f "{{.State.Running}}" "$container_id"
}

main() {
  if [[ $# != 1 ]]; then
    usage
    exit 1
  fi

  local sopcast_url=$1
  # Name the container after the ID so we don't have duplicate channels with the same stream
  local channel_id=$(echo $sopcast_url | awk -F/ '{print $4}')
  local empty_port=$(find_empty_port)
  local container_id=$((docker run -d \
    -p "$empty_port:$empty_port" \
    --name "sopcast-$channel_id" \
    danihodovic/sopcast "$sopcast_url" "$empty_port") \
    2>&1)

  # If the container already exists, start it and update our empty port mapping
  if [[ $container_id =~ "is already in use by container" ]]; then
    container_id=$(echo $container_id | grep -oP 'The name "/\K(sopcast-[0-9]+)')
    empty_port=$(docker inspect ${container_id} | grep -oP 'HostPort": "\K(\d+)' | head -n 1)
    echo "Starting exsting container $container_id"
    docker start $container_id > /dev/null
  fi

  for _ in $(seq 1 40); do
    if [[ $(is_container_running "$container_id") = 'false' ]]; then
      echo 'Container no longer running. Stream sucks'
      exit 1
    else
      echo 'Waiting for stream to start...'
    fi
    sleep 0.5
  done

  if [ "$(is_container_running "$container_id")" = 'true' ]; then
    vlc http://localhost:"$empty_port"/tv.asf &>/dev/null & disown
  else
    echo 'Container failed to start. The stream probably sucks'
    exit 1
  fi
}

main "$@"
